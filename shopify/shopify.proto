syntax = "proto3";

package pb;

option go_package = "github.com/Shridhar2104/logilo/shopify/pb";

message ShopifyConfig{
    string api_key = 1;
    string api_secret = 2;
    string redirect_url = 3;
    string scope = 4;
}

message FetchOrdersRequest {
    string shop_name = 1;
    int32 limit = 2;
    string since_id = 3;
}

message FetchOrdersResponse {
    repeated Order orders = 1;
}

// Detailed Order representation with comprehensive fields
message Order {
    string id = 1;                       // Unique internal identifier of the order
    string account_id = 2;               // Associated account ID
    string shop_id = 3;                  // Shopify shop ID
    string order_name = 4;               // Name of the order
    string order_id = 5;                 // Shopify's native order ID
    string order_number = 6;             // Displayed order number
    string order_status = 7;             // Current status of the order
    double order_total = 8;              // Total amount for the order
    string order_created_at = 9;         // Creation timestamp of the order
    string order_updated_at = 10;        // Last updated timestamp of the order
    
    // Additional order details
    repeated OrderLineItem line_items = 11;  // List of items in the order
    Address shipping_address = 12;           // Shipping address details
    PaymentDetails payment_details = 13;     // Payment information
    string customer_id = 14;                 // Shopify customer ID
    string fulfillment_status = 15;          // Status of order fulfillment
    string financial_status = 16;            // Financial status of the order
    repeated string tags = 17;               // Order tags
}


// Represents a single line item in an order
message OrderLineItem {
    string product_id = 1;       // Unique product identifier
    string variant_id = 2;       // Product variant identifier
    string name = 3;             // Product name
    int32 quantity = 4;          // Quantity of the product
    double price = 5;            // Price of the item
    string sku = 6;              // Stock Keeping Unit
}

// Shipping address details
message Address {
    string name = 1;
    string address1 = 2;
    string address2 = 3;
    string city = 4;
    string province = 5;
    string country = 6;
    string postal_code = 7;
    string phone = 8;
}

// Payment details for an order
message PaymentDetails {
    string payment_method = 1;
    string credit_card_bin = 2;
    string avs_result_code = 3;
    string cvv_result_code = 4;
}

// Request to create a new order
message CreateOrderRequest {
    Order order = 1;  // Comprehensive order details
}

// Response after creating an order
message CreateOrderResponse {
    Order order = 1;
    string message = 2;  // Optional additional message
}

// Request to get an order by its ID
message GetOrderByIDRequest {
    string id = 1;  // Either internal ID or Shopify order ID
}

// Response for GetOrderByIDRequest
message GetOrderByIDResponse {
    Order order = 1;
}

// Request to list orders with advanced filtering and pagination
message ListOrdersRequest {
    uint64 skip = 1;                   // Number of records to skip
    uint64 take = 2;                   // Number of records to fetch
    repeated string ids = 3;           // List of IDs to filter by
    string query = 4;                  // Flexible query string for filtering
    
    // Additional filtering options
    string status_filter = 5;          // Filter by order status
    string date_from = 6;              // Start date for order creation
    string date_to = 7;                // End date for order creation
    string customer_id = 8;            // Filter by specific customer
}

// Response for ListOrdersRequest with pagination metadata
message ListOrdersResponse {
    repeated Order orders = 1;         // List of orders
    uint64 total_count = 2;            // Total number of orders available
    uint64 returned_count = 3;         // Number of orders in this response
}

// Request to update an existing order
message UpdateOrderRequest {
    Order order = 1;                   // Updated order details
    string update_mask = 2;            // Specify which fields to update
}

// Response after updating an order
message UpdateOrderResponse {
    Order order = 1;
    string message = 2;                // Optional additional message
}

// Detailed Shipment information
message Shipment {
    string id = 1;                     // Unique shipment identifier
    string order_id = 2;               // Associated order ID
    string order_number = 3;           // Order number
    string tracking_number = 4;        // Shipping tracking number
    string shipping_carrier = 5;       // Shipping carrier name
    string shipment_status = 6;        // Current status of the shipment
    string shipment_created_at = 7;    // Shipment creation timestamp
    string estimated_delivery_date = 8;// Estimated delivery date
    repeated ShipmentItem items = 9;   // Items in this shipment
    Address shipping_address = 10;     // Shipping destination
}

// Represents items in a shipment
message ShipmentItem {
    string product_id = 1;
    string variant_id = 2;
    int32 quantity = 3;
}

// Request to create a shipment
message CreateShipmentRequest {
    string order_id = 1;
    repeated ShipmentItem items = 2;
    string shipping_carrier = 3;
    string tracking_number = 4;
    string shipment_status = 5;
}

// Response after creating a shipment
message CreateShipmentResponse {
    Shipment shipment = 1;
    string tracking_url = 2;
}

// Request to get shipment details
message GetShipmentRequest {
    string shipment_id = 1;
    string order_id = 2;
}

// Response with shipment details
message GetShipmentResponse {
    Shipment shipment = 1;
}

// Request to list shipments
message ListShipmentsRequest {
    uint64 skip = 1;
    uint64 take = 2;
    repeated string order_ids = 3;
    string status_filter = 4;
}

// Response with list of shipments
message ListShipmentsResponse {
    repeated Shipment shipments = 1;
    uint64 total_count = 2;
}

// Shopify service definition for comprehensive order and shipment operations
// Wallet transaction details for COD remittance
message WalletTransaction {
    string transaction_id = 1;       // Unique identifier for the transaction
    string order_id = 2;             // Associated order ID
    string user_id = 3;              // User's unique identifier
    double amount = 4;               // Amount to be credited
    string currency = 5;             // Transaction currency
    string transaction_type = 6;     // Type of transaction (e.g., COD_REMITTANCE)
    string status = 7;               // Transaction status (PENDING, COMPLETED, FAILED)
    string created_at = 8;           // Transaction creation timestamp
    string updated_at = 9;           // Transaction last update timestamp
}

// Request to process COD remittance
message ProcessCODRemittanceRequest {
    string order_id = 1;             // Order to process for remittance
    string user_id = 2;              // User receiving the remittance
    double amount = 3;               // Amount to be remitted
    string bank_account_id = 4;      // User's bank account for remittance
}

// Response from COD remittance process
message ProcessCODRemittanceResponse {
    bool success = 1;                // Whether remittance was successful
    WalletTransaction transaction = 2; // Details of the wallet transaction
    string error_message = 3;        // Detailed error if remittance failed
}

service ShopifyService {
    // Order-related RPCs
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
    rpc GetOrderByID(GetOrderByIDRequest) returns (GetOrderByIDResponse);
    rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse);
    rpc UpdateOrder(UpdateOrderRequest) returns (UpdateOrderResponse);
    
    // Shipment-related RPCs
    rpc CreateShipment(CreateShipmentRequest) returns (CreateShipmentResponse);
    rpc GetShipment(GetShipmentRequest) returns (GetShipmentResponse);
    rpc ListShipments(ListShipmentsRequest) returns (ListShipmentsResponse);
    
    // COD Remittance RPCs
    rpc ProcessCODRemittance(ProcessCODRemittanceRequest) returns (ProcessCODRemittanceResponse);
}
