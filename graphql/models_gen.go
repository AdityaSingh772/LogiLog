// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID                     string      `json:"id"`
	Email                  string      `json:"email"`
	Name                   string      `json:"name"`
	PhoneNumber            *string     `json:"phoneNumber,omitempty"`
	Orders                 []*Order    `json:"orders"`
	DefaultShippingAddress *Address    `json:"defaultShippingAddress,omitempty"`
	AccountType            AccountType `json:"accountType"`
	CreatedAt              string      `json:"createdAt"`
	UpdatedAt              string      `json:"updatedAt"`
}

type Address struct {
	ID         string      `json:"id"`
	Street     string      `json:"street"`
	City       string      `json:"city"`
	State      string      `json:"state"`
	Country    string      `json:"country"`
	PostalCode string      `json:"postalCode"`
	Type       AddressType `json:"type"`
	Latitude   *float64    `json:"latitude,omitempty"`
	Longitude  *float64    `json:"longitude,omitempty"`
	IsVerified bool        `json:"isVerified"`
}

type CourierPartner struct {
	ID                  string             `json:"id"`
	Name                string             `json:"name"`
	TrackingURLTemplate *string            `json:"trackingUrlTemplate,omitempty"`
	ContactEmail        *string            `json:"contactEmail,omitempty"`
	ContactPhone        *string            `json:"contactPhone,omitempty"`
	SupportedMethods    []ShippingMethod   `json:"supportedMethods"`
	CoverageAreas       []string           `json:"coverageAreas,omitempty"`
	RatingScore         *float64           `json:"ratingScore,omitempty"`
	SupportedDimensions *ProductDimensions `json:"supportedDimensions,omitempty"`
	MaxWeight           *float64           `json:"maxWeight,omitempty"`
}

type CreateAccountInput struct {
	Email                  string              `json:"email"`
	Name                   string              `json:"name"`
	PhoneNumber            *string             `json:"phoneNumber,omitempty"`
	AccountType            *AccountType        `json:"accountType,omitempty"`
	DefaultShippingAddress *CreateAddressInput `json:"defaultShippingAddress,omitempty"`
}

type CreateAddressInput struct {
	Street     string       `json:"street"`
	City       string       `json:"city"`
	State      string       `json:"state"`
	Country    string       `json:"country"`
	PostalCode string       `json:"postalCode"`
	Type       *AddressType `json:"type,omitempty"`
	Latitude   *float64     `json:"latitude,omitempty"`
	Longitude  *float64     `json:"longitude,omitempty"`
}

type CreateLineItemInput struct {
	ProductID string  `json:"productId"`
	Quantity  int     `json:"quantity"`
	UnitPrice float64 `json:"unitPrice"`
}

type CreateOrderInput struct {
	AccountID         string                 `json:"accountId"`
	LineItems         []*CreateLineItemInput `json:"lineItems"`
	ShippingMethod    ShippingMethod         `json:"shippingMethod"`
	ShippingAddressID string                 `json:"shippingAddressId"`
	PickupAddressID   *string                `json:"pickupAddressId,omitempty"`
	Notes             *string                `json:"notes,omitempty"`
	Tags              []string               `json:"tags,omitempty"`
}

type CreateProductInput struct {
	Name                 string                  `json:"name"`
	Sku                  string                  `json:"sku"`
	Weight               float64                 `json:"weight"`
	Dimensions           *ProductDimensionsInput `json:"dimensions"`
	Category             *string                 `json:"category,omitempty"`
	ShippingRestrictions []string                `json:"shippingRestrictions,omitempty"`
}

type CreateShipmentInput struct {
	OrderID               string         `json:"orderId"`
	CourierID             string         `json:"courierId"`
	ShippingMethod        ShippingMethod `json:"shippingMethod"`
	Awb                   string         `json:"awb"`
	EstimatedDeliveryDate *string        `json:"estimatedDeliveryDate,omitempty"`
}

type LineItem struct {
	ID             string   `json:"id"`
	Product        *Product `json:"product"`
	OrderID        string   `json:"orderId"`
	Quantity       int      `json:"quantity"`
	UnitPrice      float64  `json:"unitPrice"`
	TotalPrice     float64  `json:"totalPrice"`
	DiscountAmount *float64 `json:"discountAmount,omitempty"`
	TaxAmount      *float64 `json:"taxAmount,omitempty"`
}

type Mutation struct {
}

type Order struct {
	ID              string         `json:"id"`
	Account         *Account       `json:"account"`
	LineItems       []*LineItem    `json:"lineItems"`
	Subtotal        float64        `json:"subtotal"`
	TotalTax        float64        `json:"totalTax"`
	TotalDiscount   float64        `json:"totalDiscount"`
	TotalPrice      float64        `json:"totalPrice"`
	Currency        string         `json:"currency"`
	PickupAddress   *Address       `json:"pickupAddress"`
	ShippingAddress *Address       `json:"shippingAddress"`
	ShippingMethod  ShippingMethod `json:"shippingMethod"`
	ShippingCost    float64        `json:"shippingCost"`
	Status          OrderStatus    `json:"status"`
	PaymentStatus   PaymentStatus  `json:"paymentStatus"`
	PaymentMethod   *string        `json:"paymentMethod,omitempty"`
	PaymentDate     *string        `json:"paymentDate,omitempty"`
	Shipments       []*Shipment    `json:"shipments"`
	TrackingNumbers []string       `json:"trackingNumbers"`
	Notes           *string        `json:"notes,omitempty"`
	Tags            []string       `json:"tags,omitempty"`
	CreatedAt       string         `json:"createdAt"`
	UpdatedAt       string         `json:"updatedAt"`
}

type OrderFilterInput struct {
	Status        *OrderStatus   `json:"status,omitempty"`
	PaymentStatus *PaymentStatus `json:"paymentStatus,omitempty"`
	CreatedAfter  *string        `json:"createdAfter,omitempty"`
	CreatedBefore *string        `json:"createdBefore,omitempty"`
}

type PaginationInput struct {
	Skip *int `json:"skip,omitempty"`
	Take *int `json:"take,omitempty"`
}

type Product struct {
	ID                   string             `json:"id"`
	Name                 string             `json:"name"`
	Sku                  string             `json:"sku"`
	Weight               float64            `json:"weight"`
	Dimensions           *ProductDimensions `json:"dimensions,omitempty"`
	Category             *string            `json:"category,omitempty"`
	ShippingRestrictions []string           `json:"shippingRestrictions,omitempty"`
}

type ProductDimensions struct {
	Length float64 `json:"length"`
	Width  float64 `json:"width"`
	Height float64 `json:"height"`
}

type ProductDimensionsInput struct {
	Length float64 `json:"length"`
	Width  float64 `json:"width"`
	Height float64 `json:"height"`
}

type Query struct {
}

type Shipment struct {
	ID                    string             `json:"id"`
	Order                 *Order             `json:"order"`
	Courier               *CourierPartner    `json:"courier"`
	Awb                   string             `json:"awb"`
	Status                ShipmentStatus     `json:"status"`
	TrackingURL           *string            `json:"trackingUrl,omitempty"`
	ShippingMethod        ShippingMethod     `json:"shippingMethod"`
	ShippingCost          float64            `json:"shippingCost"`
	PickupScheduledAt     *string            `json:"pickupScheduledAt,omitempty"`
	PickedUpAt            *string            `json:"pickedUpAt,omitempty"`
	EstimatedDeliveryDate *string            `json:"estimatedDeliveryDate,omitempty"`
	DeliveredAt           *string            `json:"deliveredAt,omitempty"`
	ActualWeight          *float64           `json:"actualWeight,omitempty"`
	VolumetricWeight      *float64           `json:"volumetricWeight,omitempty"`
	LabelURL              *string            `json:"labelUrl,omitempty"`
	InsuranceDetails      *ShipmentInsurance `json:"insuranceDetails,omitempty"`
	CreatedAt             string             `json:"createdAt"`
	UpdatedAt             string             `json:"updatedAt"`
}

type ShipmentFilterInput struct {
	Status        *ShipmentStatus `json:"status,omitempty"`
	CreatedAfter  *string         `json:"createdAfter,omitempty"`
	CreatedBefore *string         `json:"createdBefore,omitempty"`
}

type ShipmentInsurance struct {
	ID        string  `json:"id"`
	Amount    float64 `json:"amount"`
	Provider  *string `json:"provider,omitempty"`
	Status    *string `json:"status,omitempty"`
	Claimable bool    `json:"claimable"`
}

type AccountType string

const (
	AccountTypeIndividual AccountType = "INDIVIDUAL"
	AccountTypeBusiness   AccountType = "BUSINESS"
	AccountTypeEnterprise AccountType = "ENTERPRISE"
)

var AllAccountType = []AccountType{
	AccountTypeIndividual,
	AccountTypeBusiness,
	AccountTypeEnterprise,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeIndividual, AccountTypeBusiness, AccountTypeEnterprise:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AddressType string

const (
	AddressTypeResidential AddressType = "RESIDENTIAL"
	AddressTypeCommercial  AddressType = "COMMERCIAL"
	AddressTypeWarehouse   AddressType = "WAREHOUSE"
	AddressTypePickupPoint AddressType = "PICKUP_POINT"
)

var AllAddressType = []AddressType{
	AddressTypeResidential,
	AddressTypeCommercial,
	AddressTypeWarehouse,
	AddressTypePickupPoint,
}

func (e AddressType) IsValid() bool {
	switch e {
	case AddressTypeResidential, AddressTypeCommercial, AddressTypeWarehouse, AddressTypePickupPoint:
		return true
	}
	return false
}

func (e AddressType) String() string {
	return string(e)
}

func (e *AddressType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddressType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddressType", str)
	}
	return nil
}

func (e AddressType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "PENDING"
	OrderStatusProcessing OrderStatus = "PROCESSING"
	OrderStatusShipped    OrderStatus = "SHIPPED"
	OrderStatusDelivered  OrderStatus = "DELIVERED"
	OrderStatusCancelled  OrderStatus = "CANCELLED"
	OrderStatusRefunded   OrderStatus = "REFUNDED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPending,
	OrderStatusProcessing,
	OrderStatusShipped,
	OrderStatusDelivered,
	OrderStatusCancelled,
	OrderStatusRefunded,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPending, OrderStatusProcessing, OrderStatusShipped, OrderStatusDelivered, OrderStatusCancelled, OrderStatusRefunded:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusUnpaid        PaymentStatus = "UNPAID"
	PaymentStatusPartiallyPaid PaymentStatus = "PARTIALLY_PAID"
	PaymentStatusPaid          PaymentStatus = "PAID"
	PaymentStatusRefunded      PaymentStatus = "REFUNDED"
	PaymentStatusFailed        PaymentStatus = "FAILED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusUnpaid,
	PaymentStatusPartiallyPaid,
	PaymentStatusPaid,
	PaymentStatusRefunded,
	PaymentStatusFailed,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusUnpaid, PaymentStatusPartiallyPaid, PaymentStatusPaid, PaymentStatusRefunded, PaymentStatusFailed:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShipmentStatus string

const (
	ShipmentStatusCreated         ShipmentStatus = "CREATED"
	ShipmentStatusPickupScheduled ShipmentStatus = "PICKUP_SCHEDULED"
	ShipmentStatusInTransit       ShipmentStatus = "IN_TRANSIT"
	ShipmentStatusOutForDelivery  ShipmentStatus = "OUT_FOR_DELIVERY"
	ShipmentStatusDelivered       ShipmentStatus = "DELIVERED"
	ShipmentStatusReturned        ShipmentStatus = "RETURNED"
	ShipmentStatusLost            ShipmentStatus = "LOST"
)

var AllShipmentStatus = []ShipmentStatus{
	ShipmentStatusCreated,
	ShipmentStatusPickupScheduled,
	ShipmentStatusInTransit,
	ShipmentStatusOutForDelivery,
	ShipmentStatusDelivered,
	ShipmentStatusReturned,
	ShipmentStatusLost,
}

func (e ShipmentStatus) IsValid() bool {
	switch e {
	case ShipmentStatusCreated, ShipmentStatusPickupScheduled, ShipmentStatusInTransit, ShipmentStatusOutForDelivery, ShipmentStatusDelivered, ShipmentStatusReturned, ShipmentStatusLost:
		return true
	}
	return false
}

func (e ShipmentStatus) String() string {
	return string(e)
}

func (e *ShipmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShipmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShipmentStatus", str)
	}
	return nil
}

func (e ShipmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShippingMethod string

const (
	ShippingMethodStandard      ShippingMethod = "STANDARD"
	ShippingMethodExpress       ShippingMethod = "EXPRESS"
	ShippingMethodOvernight     ShippingMethod = "OVERNIGHT"
	ShippingMethodInternational ShippingMethod = "INTERNATIONAL"
)

var AllShippingMethod = []ShippingMethod{
	ShippingMethodStandard,
	ShippingMethodExpress,
	ShippingMethodOvernight,
	ShippingMethodInternational,
}

func (e ShippingMethod) IsValid() bool {
	switch e {
	case ShippingMethodStandard, ShippingMethodExpress, ShippingMethodOvernight, ShippingMethodInternational:
		return true
	}
	return false
}

func (e ShippingMethod) String() string {
	return string(e)
}

func (e *ShippingMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShippingMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShippingMethod", str)
	}
	return nil
}

func (e ShippingMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
