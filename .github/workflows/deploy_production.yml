name: Deploy Microservices to ECS

on:
  push:
    branches:
      - production  # Trigger pipeline on changes to the production branch

jobs:
  shopify:
    if: contains(github.event.commits[*].modified, 'shopify/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_SHOPIFY_REPO }}

      - name: Build and Push App Docker Image
        run: |
          docker build -t shopify-app -f ./shopify/app.dockerfile .
          docker tag shopify-app:latest ${{ secrets.ECR_SHOPIFY_REPO }}:app-latest
          docker push ${{ secrets.ECR_SHOPIFY_REPO }}:app-latest

      - name: Build and Push DB Docker Image
        run: |
          cd shopify
          docker build -t shopify-db -f db.dockerfile .
          docker tag shopify-db:latest ${{ secrets.ECR_SHOPIFY_REPO }}:db-latest
          docker push ${{ secrets.ECR_SHOPIFY_REPO }}:db-latest

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster staging-cluster \
            --service shopify-service \
            --force-new-deployment

  account:
    if: contains(github.event.commits[*].modified, 'account/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_ACCOUNT_REPO }}

      - name: Build and Push App Docker Image
        run: |
          cd account
          docker build -t account-app -f app.dockerfile .
          docker tag account-app:latest ${{ secrets.ECR_ACCOUNT_REPO }}:app-latest
          docker push ${{ secrets.ECR_ACCOUNT_REPO }}:app-latest

      - name: Build and Push DB Docker Image
        run: |
          cd account
          docker build -t account-db -f db.dockerfile .
          docker tag account-db:latest ${{ secrets.ECR_ACCOUNT_REPO }}:db-latest
          docker push ${{ secrets.ECR_ACCOUNT_REPO }}:db-latest

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster staging-cluster \
            --service account-service \
            --force-new-deployment

  graphql:
    if: contains(github.event.commits[*].modified, 'graphql/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_GRAPHQL_REPO }}

      - name: Build and Push Docker Image
        run: |
          cd graphql
          docker build -t graphql-app -f Dockerfile .
          docker tag graphql-app:latest ${{ secrets.ECR_GRAPHQL_REPO }}:latest
          docker push ${{ secrets.ECR_GRAPHQL_REPO }}:latest

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster staging-cluster \
            --service graphql-service \
            --force-new-deployment
